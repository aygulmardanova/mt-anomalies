1.
all trajectories with length < 15
epsilonX = 0.1 * (maxX - minX);
epsilonY = 0.1 * (maxY - minY);
delta = 0.5 * min(m, n)

17 output clusters

DI = 0.50

-----------------------
2.
all trajectories
regression threshold = 0,98, {3, 4}
consider only key points
the same parameter values

17 output clusters

DI = 0.67

-----------------------
3.
2.txt
key points UPON approximated trajectories
minLength 10,
minTotalDist 80
maxKPCount 9

DI = 0.75
List.of(18, 19, 20, 40, 44).contains(clusters.get(i1).getId()) && List.of(19, 20, 23, 44, 84, 196).contains(clusters.get(i2).getId())
-----------------------
4.
minLength = 10;
minTotalDist = 80;
maxKPCount = 11
clusters 12

DI = 0.64

-----------------------
5.

new keyPoints
DI = 0.60
but more accurate

-----------------------
6. exp6

coeff = 20.0

-----------------------
7. exp7

constant epsX, epsY, coeff 0.15 * (max - min)

-----------------------
8. exp8

constant epsX, epsY, coeff 0.1 * (max - min)

9. exp9

filtered
adaptive epsilon 20.0
keyPoints only: solutions, border points

10. exp10

filtered
static epsilon
keyPoints only: solutions, border points

11. exp11

filtered
RDP N, 9 points
8 clusters
keyPoints from rdp + middle points, in total ~8,9 points.
adapt.coeff = 20.0

12. exp12
RDP 8 points, remove redundant points with coeff 2 after RDP_N

14. exp14
regression, hierarchical, adapt_X = 15, adapt_Y = 20

15. exp15
rdp_n, 8, form 6.1.2 (coeff X = 15, coeff Y = 20, same limits - 250 and 250 )